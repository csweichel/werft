// Code generated by protoc-gen-go. DO NOT EDIT.
// source: werft-ui.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListJobSpecsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListJobSpecsRequest) Reset()         { *m = ListJobSpecsRequest{} }
func (m *ListJobSpecsRequest) String() string { return proto.CompactTextString(m) }
func (*ListJobSpecsRequest) ProtoMessage()    {}
func (*ListJobSpecsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d41ca2a021dc92d, []int{0}
}

func (m *ListJobSpecsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListJobSpecsRequest.Unmarshal(m, b)
}
func (m *ListJobSpecsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListJobSpecsRequest.Marshal(b, m, deterministic)
}
func (m *ListJobSpecsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobSpecsRequest.Merge(m, src)
}
func (m *ListJobSpecsRequest) XXX_Size() int {
	return xxx_messageInfo_ListJobSpecsRequest.Size(m)
}
func (m *ListJobSpecsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobSpecsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobSpecsRequest proto.InternalMessageInfo

type ListJobSpecsResponse struct {
	Repo                 *Repository          `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path                 string               `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Description          string               `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Arguments            []*DesiredAnnotation `protobuf:"bytes,5,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Plugins              map[string]string    `protobuf:"bytes,6,rep,name=plugins,proto3" json:"plugins,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListJobSpecsResponse) Reset()         { *m = ListJobSpecsResponse{} }
func (m *ListJobSpecsResponse) String() string { return proto.CompactTextString(m) }
func (*ListJobSpecsResponse) ProtoMessage()    {}
func (*ListJobSpecsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d41ca2a021dc92d, []int{1}
}

func (m *ListJobSpecsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListJobSpecsResponse.Unmarshal(m, b)
}
func (m *ListJobSpecsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListJobSpecsResponse.Marshal(b, m, deterministic)
}
func (m *ListJobSpecsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobSpecsResponse.Merge(m, src)
}
func (m *ListJobSpecsResponse) XXX_Size() int {
	return xxx_messageInfo_ListJobSpecsResponse.Size(m)
}
func (m *ListJobSpecsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobSpecsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobSpecsResponse proto.InternalMessageInfo

func (m *ListJobSpecsResponse) GetRepo() *Repository {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *ListJobSpecsResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListJobSpecsResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ListJobSpecsResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ListJobSpecsResponse) GetArguments() []*DesiredAnnotation {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *ListJobSpecsResponse) GetPlugins() map[string]string {
	if m != nil {
		return m.Plugins
	}
	return nil
}

// DesiredAnnotation describes an annotation a job should have
type DesiredAnnotation struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Required             bool     `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DesiredAnnotation) Reset()         { *m = DesiredAnnotation{} }
func (m *DesiredAnnotation) String() string { return proto.CompactTextString(m) }
func (*DesiredAnnotation) ProtoMessage()    {}
func (*DesiredAnnotation) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d41ca2a021dc92d, []int{2}
}

func (m *DesiredAnnotation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DesiredAnnotation.Unmarshal(m, b)
}
func (m *DesiredAnnotation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DesiredAnnotation.Marshal(b, m, deterministic)
}
func (m *DesiredAnnotation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DesiredAnnotation.Merge(m, src)
}
func (m *DesiredAnnotation) XXX_Size() int {
	return xxx_messageInfo_DesiredAnnotation.Size(m)
}
func (m *DesiredAnnotation) XXX_DiscardUnknown() {
	xxx_messageInfo_DesiredAnnotation.DiscardUnknown(m)
}

var xxx_messageInfo_DesiredAnnotation proto.InternalMessageInfo

func (m *DesiredAnnotation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DesiredAnnotation) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *DesiredAnnotation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type IsReadOnlyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsReadOnlyRequest) Reset()         { *m = IsReadOnlyRequest{} }
func (m *IsReadOnlyRequest) String() string { return proto.CompactTextString(m) }
func (*IsReadOnlyRequest) ProtoMessage()    {}
func (*IsReadOnlyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d41ca2a021dc92d, []int{3}
}

func (m *IsReadOnlyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsReadOnlyRequest.Unmarshal(m, b)
}
func (m *IsReadOnlyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsReadOnlyRequest.Marshal(b, m, deterministic)
}
func (m *IsReadOnlyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsReadOnlyRequest.Merge(m, src)
}
func (m *IsReadOnlyRequest) XXX_Size() int {
	return xxx_messageInfo_IsReadOnlyRequest.Size(m)
}
func (m *IsReadOnlyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsReadOnlyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsReadOnlyRequest proto.InternalMessageInfo

type IsReadOnlyResponse struct {
	Readonly             bool     `protobuf:"varint,1,opt,name=readonly,proto3" json:"readonly,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsReadOnlyResponse) Reset()         { *m = IsReadOnlyResponse{} }
func (m *IsReadOnlyResponse) String() string { return proto.CompactTextString(m) }
func (*IsReadOnlyResponse) ProtoMessage()    {}
func (*IsReadOnlyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d41ca2a021dc92d, []int{4}
}

func (m *IsReadOnlyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsReadOnlyResponse.Unmarshal(m, b)
}
func (m *IsReadOnlyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsReadOnlyResponse.Marshal(b, m, deterministic)
}
func (m *IsReadOnlyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsReadOnlyResponse.Merge(m, src)
}
func (m *IsReadOnlyResponse) XXX_Size() int {
	return xxx_messageInfo_IsReadOnlyResponse.Size(m)
}
func (m *IsReadOnlyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsReadOnlyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsReadOnlyResponse proto.InternalMessageInfo

func (m *IsReadOnlyResponse) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

func init() {
	proto.RegisterType((*ListJobSpecsRequest)(nil), "v1.ListJobSpecsRequest")
	proto.RegisterType((*ListJobSpecsResponse)(nil), "v1.ListJobSpecsResponse")
	proto.RegisterMapType((map[string]string)(nil), "v1.ListJobSpecsResponse.PluginsEntry")
	proto.RegisterType((*DesiredAnnotation)(nil), "v1.DesiredAnnotation")
	proto.RegisterType((*IsReadOnlyRequest)(nil), "v1.IsReadOnlyRequest")
	proto.RegisterType((*IsReadOnlyResponse)(nil), "v1.IsReadOnlyResponse")
}

func init() {
	proto.RegisterFile("werft-ui.proto", fileDescriptor_8d41ca2a021dc92d)
}

var fileDescriptor_8d41ca2a021dc92d = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x49, 0xfa, 0x93, 0x49, 0x55, 0xd1, 0x6d, 0x0b, 0x96, 0x4f, 0x91, 0xa5, 0x8a, 0x5c,
	0xb0, 0x9b, 0xf4, 0x82, 0x2a, 0x21, 0x04, 0xa2, 0x87, 0x22, 0x24, 0xd0, 0x22, 0x84, 0xc4, 0x6d,
	0x63, 0x0f, 0xce, 0xaa, 0xce, 0xee, 0x76, 0x77, 0xed, 0xca, 0x4f, 0xc1, 0xdb, 0xf0, 0x7c, 0x68,
	0xd7, 0xb8, 0x35, 0x35, 0xdc, 0x66, 0xbe, 0xf9, 0xfd, 0xbe, 0x19, 0x38, 0xbc, 0x43, 0xfd, 0xc3,
	0xbe, 0xac, 0x78, 0xa2, 0xb4, 0xb4, 0x92, 0x8c, 0xea, 0x65, 0x34, 0xf3, 0x58, 0x0b, 0xc4, 0xa7,
	0x70, 0xfc, 0x91, 0x1b, 0xfb, 0x41, 0xae, 0xbf, 0x28, 0xcc, 0x0c, 0xc5, 0xdb, 0x0a, 0x8d, 0x8d,
	0x7f, 0x8d, 0xe0, 0xe4, 0x6f, 0xdc, 0x28, 0x29, 0x0c, 0x92, 0x18, 0x26, 0x1a, 0x95, 0x0c, 0x83,
	0x79, 0xb0, 0x98, 0xad, 0x0e, 0x93, 0x7a, 0x99, 0x50, 0x54, 0xd2, 0x70, 0x2b, 0x75, 0x43, 0x7d,
	0x8c, 0x10, 0x98, 0x08, 0xb6, 0xc5, 0x70, 0x34, 0x0f, 0x16, 0x53, 0xea, 0x6d, 0x87, 0x29, 0x66,
	0x37, 0xe1, 0xb8, 0xc5, 0x9c, 0x4d, 0xe6, 0x30, 0xcb, 0xd1, 0x64, 0x9a, 0x2b, 0xcb, 0xa5, 0x08,
	0x27, 0x3e, 0xd4, 0x87, 0xc8, 0x05, 0x4c, 0x99, 0x2e, 0xaa, 0x2d, 0x0a, 0x6b, 0xc2, 0x9d, 0xf9,
	0x78, 0x31, 0x5b, 0x9d, 0xba, 0x91, 0xef, 0xd1, 0x70, 0x8d, 0xf9, 0x5b, 0x21, 0xa4, 0x65, 0x2e,
	0x93, 0x3e, 0xe4, 0x91, 0x37, 0xb0, 0xa7, 0xca, 0xaa, 0xe0, 0xc2, 0x84, 0xbb, 0xbe, 0xe4, 0xcc,
	0x95, 0xfc, 0x8b, 0x4d, 0xf2, 0xb9, 0xcd, 0xbb, 0x12, 0x56, 0x37, 0xb4, 0xab, 0x8a, 0x2e, 0xe1,
	0xa0, 0x1f, 0x20, 0x4f, 0x61, 0x7c, 0x83, 0x8d, 0xa7, 0x3c, 0xa5, 0xce, 0x24, 0x27, 0xb0, 0x53,
	0xb3, 0xb2, 0xea, 0x28, 0xb6, 0xce, 0xe5, 0xe8, 0x55, 0x10, 0x23, 0x1c, 0x0d, 0x96, 0xbb, 0x17,
	0x24, 0xe8, 0x09, 0x12, 0xc1, 0xbe, 0xc6, 0xdb, 0xca, 0x65, 0xfa, 0x2e, 0xfb, 0xf4, 0xde, 0x7f,
	0x2c, 0xcc, 0x78, 0x20, 0x4c, 0x7c, 0x0c, 0x47, 0xd7, 0x86, 0x22, 0xcb, 0x3f, 0x89, 0xb2, 0xe9,
	0x8e, 0x76, 0x0e, 0xa4, 0x0f, 0xfe, 0xb9, 0x98, 0x1f, 0xc4, 0x72, 0x29, 0xca, 0x96, 0x82, 0x1f,
	0xd4, 0xfa, 0xab, 0x9f, 0x01, 0xec, 0x7d, 0x73, 0xdf, 0xf0, 0xf5, 0x9a, 0x5c, 0xc1, 0x41, 0x5f,
	0x23, 0xf2, 0x7c, 0xa8, 0x9a, 0x1f, 0x13, 0x85, 0xff, 0x93, 0x33, 0x7e, 0x72, 0x1e, 0x90, 0xd7,
	0x00, 0x0f, 0x4b, 0x10, 0x7f, 0xad, 0xc1, 0xa6, 0xd1, 0xb3, 0xc7, 0x70, 0xd7, 0xe0, 0xdd, 0x8b,
	0xef, 0x67, 0x05, 0xb7, 0x9b, 0x6a, 0x9d, 0x64, 0x72, 0x9b, 0x66, 0xe6, 0x0e, 0x79, 0xb6, 0xc1,
	0x32, 0xf5, 0x3f, 0x9b, 0xaa, 0x9b, 0x22, 0x65, 0x8a, 0xa7, 0xf5, 0x72, 0xbd, 0xeb, 0xff, 0xf7,
	0xe2, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xfa, 0xe3, 0xe7, 0xe2, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WerftUIClient is the client API for WerftUI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WerftUIClient interface {
	// ListJobSpecs returns a list of jobs that can be started through the UI.
	ListJobSpecs(ctx context.Context, in *ListJobSpecsRequest, opts ...grpc.CallOption) (WerftUI_ListJobSpecsClient, error)
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error)
}

type werftUIClient struct {
	cc grpc.ClientConnInterface
}

func NewWerftUIClient(cc grpc.ClientConnInterface) WerftUIClient {
	return &werftUIClient{cc}
}

func (c *werftUIClient) ListJobSpecs(ctx context.Context, in *ListJobSpecsRequest, opts ...grpc.CallOption) (WerftUI_ListJobSpecsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WerftUI_serviceDesc.Streams[0], "/v1.WerftUI/ListJobSpecs", opts...)
	if err != nil {
		return nil, err
	}
	x := &werftUIListJobSpecsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WerftUI_ListJobSpecsClient interface {
	Recv() (*ListJobSpecsResponse, error)
	grpc.ClientStream
}

type werftUIListJobSpecsClient struct {
	grpc.ClientStream
}

func (x *werftUIListJobSpecsClient) Recv() (*ListJobSpecsResponse, error) {
	m := new(ListJobSpecsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *werftUIClient) IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error) {
	out := new(IsReadOnlyResponse)
	err := c.cc.Invoke(ctx, "/v1.WerftUI/IsReadOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WerftUIServer is the server API for WerftUI service.
type WerftUIServer interface {
	// ListJobSpecs returns a list of jobs that can be started through the UI.
	ListJobSpecs(*ListJobSpecsRequest, WerftUI_ListJobSpecsServer) error
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error)
}

// UnimplementedWerftUIServer can be embedded to have forward compatible implementations.
type UnimplementedWerftUIServer struct {
}

func (*UnimplementedWerftUIServer) ListJobSpecs(req *ListJobSpecsRequest, srv WerftUI_ListJobSpecsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListJobSpecs not implemented")
}
func (*UnimplementedWerftUIServer) IsReadOnly(ctx context.Context, req *IsReadOnlyRequest) (*IsReadOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReadOnly not implemented")
}

func RegisterWerftUIServer(s *grpc.Server, srv WerftUIServer) {
	s.RegisterService(&_WerftUI_serviceDesc, srv)
}

func _WerftUI_ListJobSpecs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListJobSpecsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WerftUIServer).ListJobSpecs(m, &werftUIListJobSpecsServer{stream})
}

type WerftUI_ListJobSpecsServer interface {
	Send(*ListJobSpecsResponse) error
	grpc.ServerStream
}

type werftUIListJobSpecsServer struct {
	grpc.ServerStream
}

func (x *werftUIListJobSpecsServer) Send(m *ListJobSpecsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WerftUI_IsReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReadOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WerftUIServer).IsReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.WerftUI/IsReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WerftUIServer).IsReadOnly(ctx, req.(*IsReadOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WerftUI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.WerftUI",
	HandlerType: (*WerftUIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsReadOnly",
			Handler:    _WerftUI_IsReadOnly_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListJobSpecs",
			Handler:       _WerftUI_ListJobSpecs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "werft-ui.proto",
}
