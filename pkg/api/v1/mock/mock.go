// Code generated by MockGen. DO NOT EDIT.
// Source: werft.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1 "github.com/csweichel/werft/pkg/api/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockisStartLocalJobRequest_Content is a mock of isStartLocalJobRequest_Content interface.
type MockisStartLocalJobRequest_Content struct {
	ctrl     *gomock.Controller
	recorder *MockisStartLocalJobRequest_ContentMockRecorder
}

// MockisStartLocalJobRequest_ContentMockRecorder is the mock recorder for MockisStartLocalJobRequest_Content.
type MockisStartLocalJobRequest_ContentMockRecorder struct {
	mock *MockisStartLocalJobRequest_Content
}

// NewMockisStartLocalJobRequest_Content creates a new mock instance.
func NewMockisStartLocalJobRequest_Content(ctrl *gomock.Controller) *MockisStartLocalJobRequest_Content {
	mock := &MockisStartLocalJobRequest_Content{ctrl: ctrl}
	mock.recorder = &MockisStartLocalJobRequest_ContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisStartLocalJobRequest_Content) EXPECT() *MockisStartLocalJobRequest_ContentMockRecorder {
	return m.recorder
}

// isStartLocalJobRequest_Content mocks base method.
func (m *MockisStartLocalJobRequest_Content) isStartLocalJobRequest_Content() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isStartLocalJobRequest_Content")
}

// isStartLocalJobRequest_Content indicates an expected call of isStartLocalJobRequest_Content.
func (mr *MockisStartLocalJobRequest_ContentMockRecorder) isStartLocalJobRequest_Content() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isStartLocalJobRequest_Content", reflect.TypeOf((*MockisStartLocalJobRequest_Content)(nil).isStartLocalJobRequest_Content))
}

// MockisJobSpec_Source is a mock of isJobSpec_Source interface.
type MockisJobSpec_Source struct {
	ctrl     *gomock.Controller
	recorder *MockisJobSpec_SourceMockRecorder
}

// MockisJobSpec_SourceMockRecorder is the mock recorder for MockisJobSpec_Source.
type MockisJobSpec_SourceMockRecorder struct {
	mock *MockisJobSpec_Source
}

// NewMockisJobSpec_Source creates a new mock instance.
func NewMockisJobSpec_Source(ctrl *gomock.Controller) *MockisJobSpec_Source {
	mock := &MockisJobSpec_Source{ctrl: ctrl}
	mock.recorder = &MockisJobSpec_SourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisJobSpec_Source) EXPECT() *MockisJobSpec_SourceMockRecorder {
	return m.recorder
}

// isJobSpec_Source mocks base method.
func (m *MockisJobSpec_Source) isJobSpec_Source() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isJobSpec_Source")
}

// isJobSpec_Source indicates an expected call of isJobSpec_Source.
func (mr *MockisJobSpec_SourceMockRecorder) isJobSpec_Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isJobSpec_Source", reflect.TypeOf((*MockisJobSpec_Source)(nil).isJobSpec_Source))
}

// MockisListenResponse_Content is a mock of isListenResponse_Content interface.
type MockisListenResponse_Content struct {
	ctrl     *gomock.Controller
	recorder *MockisListenResponse_ContentMockRecorder
}

// MockisListenResponse_ContentMockRecorder is the mock recorder for MockisListenResponse_Content.
type MockisListenResponse_ContentMockRecorder struct {
	mock *MockisListenResponse_Content
}

// NewMockisListenResponse_Content creates a new mock instance.
func NewMockisListenResponse_Content(ctrl *gomock.Controller) *MockisListenResponse_Content {
	mock := &MockisListenResponse_Content{ctrl: ctrl}
	mock.recorder = &MockisListenResponse_ContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisListenResponse_Content) EXPECT() *MockisListenResponse_ContentMockRecorder {
	return m.recorder
}

// isListenResponse_Content mocks base method.
func (m *MockisListenResponse_Content) isListenResponse_Content() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isListenResponse_Content")
}

// isListenResponse_Content indicates an expected call of isListenResponse_Content.
func (mr *MockisListenResponse_ContentMockRecorder) isListenResponse_Content() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isListenResponse_Content", reflect.TypeOf((*MockisListenResponse_Content)(nil).isListenResponse_Content))
}

// MockWerftServiceClient is a mock of WerftServiceClient interface.
type MockWerftServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockWerftServiceClientMockRecorder
}

// MockWerftServiceClientMockRecorder is the mock recorder for MockWerftServiceClient.
type MockWerftServiceClientMockRecorder struct {
	mock *MockWerftServiceClient
}

// NewMockWerftServiceClient creates a new mock instance.
func NewMockWerftServiceClient(ctrl *gomock.Controller) *MockWerftServiceClient {
	mock := &MockWerftServiceClient{ctrl: ctrl}
	mock.recorder = &MockWerftServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWerftServiceClient) EXPECT() *MockWerftServiceClientMockRecorder {
	return m.recorder
}

// GetJob mocks base method.
func (m *MockWerftServiceClient) GetJob(ctx context.Context, in *v1.GetJobRequest, opts ...grpc.CallOption) (*v1.GetJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJob", varargs...)
	ret0, _ := ret[0].(*v1.GetJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockWerftServiceClientMockRecorder) GetJob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockWerftServiceClient)(nil).GetJob), varargs...)
}

// ListJobs mocks base method.
func (m *MockWerftServiceClient) ListJobs(ctx context.Context, in *v1.ListJobsRequest, opts ...grpc.CallOption) (*v1.ListJobsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobs", varargs...)
	ret0, _ := ret[0].(*v1.ListJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockWerftServiceClientMockRecorder) ListJobs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockWerftServiceClient)(nil).ListJobs), varargs...)
}

// Listen mocks base method.
func (m *MockWerftServiceClient) Listen(ctx context.Context, in *v1.ListenRequest, opts ...grpc.CallOption) (v1.WerftService_ListenClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Listen", varargs...)
	ret0, _ := ret[0].(v1.WerftService_ListenClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listen indicates an expected call of Listen.
func (mr *MockWerftServiceClientMockRecorder) Listen(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockWerftServiceClient)(nil).Listen), varargs...)
}

// StartFromPreviousJob mocks base method.
func (m *MockWerftServiceClient) StartFromPreviousJob(ctx context.Context, in *v1.StartFromPreviousJobRequest, opts ...grpc.CallOption) (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartFromPreviousJob", varargs...)
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFromPreviousJob indicates an expected call of StartFromPreviousJob.
func (mr *MockWerftServiceClientMockRecorder) StartFromPreviousJob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFromPreviousJob", reflect.TypeOf((*MockWerftServiceClient)(nil).StartFromPreviousJob), varargs...)
}

// StartGitHubJob mocks base method.
func (m *MockWerftServiceClient) StartGitHubJob(ctx context.Context, in *v1.StartGitHubJobRequest, opts ...grpc.CallOption) (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartGitHubJob", varargs...)
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartGitHubJob indicates an expected call of StartGitHubJob.
func (mr *MockWerftServiceClientMockRecorder) StartGitHubJob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGitHubJob", reflect.TypeOf((*MockWerftServiceClient)(nil).StartGitHubJob), varargs...)
}

// StartJob mocks base method.
func (m *MockWerftServiceClient) StartJob(ctx context.Context, in *v1.StartJobRequest, opts ...grpc.CallOption) (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartJob", varargs...)
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJob indicates an expected call of StartJob.
func (mr *MockWerftServiceClientMockRecorder) StartJob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJob", reflect.TypeOf((*MockWerftServiceClient)(nil).StartJob), varargs...)
}

// StartJob2 mocks base method.
func (m *MockWerftServiceClient) StartJob2(ctx context.Context, in *v1.StartJobRequest2, opts ...grpc.CallOption) (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartJob2", varargs...)
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJob2 indicates an expected call of StartJob2.
func (mr *MockWerftServiceClientMockRecorder) StartJob2(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJob2", reflect.TypeOf((*MockWerftServiceClient)(nil).StartJob2), varargs...)
}

// StartLocalJob mocks base method.
func (m *MockWerftServiceClient) StartLocalJob(ctx context.Context, opts ...grpc.CallOption) (v1.WerftService_StartLocalJobClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartLocalJob", varargs...)
	ret0, _ := ret[0].(v1.WerftService_StartLocalJobClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartLocalJob indicates an expected call of StartLocalJob.
func (mr *MockWerftServiceClientMockRecorder) StartLocalJob(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLocalJob", reflect.TypeOf((*MockWerftServiceClient)(nil).StartLocalJob), varargs...)
}

// StopJob mocks base method.
func (m *MockWerftServiceClient) StopJob(ctx context.Context, in *v1.StopJobRequest, opts ...grpc.CallOption) (*v1.StopJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopJob", varargs...)
	ret0, _ := ret[0].(*v1.StopJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopJob indicates an expected call of StopJob.
func (mr *MockWerftServiceClientMockRecorder) StopJob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopJob", reflect.TypeOf((*MockWerftServiceClient)(nil).StopJob), varargs...)
}

// Subscribe mocks base method.
func (m *MockWerftServiceClient) Subscribe(ctx context.Context, in *v1.SubscribeRequest, opts ...grpc.CallOption) (v1.WerftService_SubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(v1.WerftService_SubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockWerftServiceClientMockRecorder) Subscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockWerftServiceClient)(nil).Subscribe), varargs...)
}

// MockWerftService_StartLocalJobClient is a mock of WerftService_StartLocalJobClient interface.
type MockWerftService_StartLocalJobClient struct {
	ctrl     *gomock.Controller
	recorder *MockWerftService_StartLocalJobClientMockRecorder
}

// MockWerftService_StartLocalJobClientMockRecorder is the mock recorder for MockWerftService_StartLocalJobClient.
type MockWerftService_StartLocalJobClientMockRecorder struct {
	mock *MockWerftService_StartLocalJobClient
}

// NewMockWerftService_StartLocalJobClient creates a new mock instance.
func NewMockWerftService_StartLocalJobClient(ctrl *gomock.Controller) *MockWerftService_StartLocalJobClient {
	mock := &MockWerftService_StartLocalJobClient{ctrl: ctrl}
	mock.recorder = &MockWerftService_StartLocalJobClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWerftService_StartLocalJobClient) EXPECT() *MockWerftService_StartLocalJobClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockWerftService_StartLocalJobClient) CloseAndRecv() (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockWerftService_StartLocalJobClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockWerftService_StartLocalJobClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockWerftService_StartLocalJobClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockWerftService_StartLocalJobClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockWerftService_StartLocalJobClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockWerftService_StartLocalJobClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockWerftService_StartLocalJobClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWerftService_StartLocalJobClient)(nil).Context))
}

// Header mocks base method.
func (m *MockWerftService_StartLocalJobClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockWerftService_StartLocalJobClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockWerftService_StartLocalJobClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockWerftService_StartLocalJobClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockWerftService_StartLocalJobClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockWerftService_StartLocalJobClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockWerftService_StartLocalJobClient) Send(arg0 *v1.StartLocalJobRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockWerftService_StartLocalJobClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWerftService_StartLocalJobClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockWerftService_StartLocalJobClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockWerftService_StartLocalJobClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockWerftService_StartLocalJobClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockWerftService_StartLocalJobClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockWerftService_StartLocalJobClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockWerftService_StartLocalJobClient)(nil).Trailer))
}

// MockWerftService_SubscribeClient is a mock of WerftService_SubscribeClient interface.
type MockWerftService_SubscribeClient struct {
	ctrl     *gomock.Controller
	recorder *MockWerftService_SubscribeClientMockRecorder
}

// MockWerftService_SubscribeClientMockRecorder is the mock recorder for MockWerftService_SubscribeClient.
type MockWerftService_SubscribeClientMockRecorder struct {
	mock *MockWerftService_SubscribeClient
}

// NewMockWerftService_SubscribeClient creates a new mock instance.
func NewMockWerftService_SubscribeClient(ctrl *gomock.Controller) *MockWerftService_SubscribeClient {
	mock := &MockWerftService_SubscribeClient{ctrl: ctrl}
	mock.recorder = &MockWerftService_SubscribeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWerftService_SubscribeClient) EXPECT() *MockWerftService_SubscribeClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockWerftService_SubscribeClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockWerftService_SubscribeClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockWerftService_SubscribeClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockWerftService_SubscribeClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockWerftService_SubscribeClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWerftService_SubscribeClient)(nil).Context))
}

// Header mocks base method.
func (m *MockWerftService_SubscribeClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockWerftService_SubscribeClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockWerftService_SubscribeClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockWerftService_SubscribeClient) Recv() (*v1.SubscribeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.SubscribeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockWerftService_SubscribeClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockWerftService_SubscribeClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockWerftService_SubscribeClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockWerftService_SubscribeClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockWerftService_SubscribeClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockWerftService_SubscribeClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockWerftService_SubscribeClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockWerftService_SubscribeClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockWerftService_SubscribeClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockWerftService_SubscribeClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockWerftService_SubscribeClient)(nil).Trailer))
}

// MockWerftService_ListenClient is a mock of WerftService_ListenClient interface.
type MockWerftService_ListenClient struct {
	ctrl     *gomock.Controller
	recorder *MockWerftService_ListenClientMockRecorder
}

// MockWerftService_ListenClientMockRecorder is the mock recorder for MockWerftService_ListenClient.
type MockWerftService_ListenClientMockRecorder struct {
	mock *MockWerftService_ListenClient
}

// NewMockWerftService_ListenClient creates a new mock instance.
func NewMockWerftService_ListenClient(ctrl *gomock.Controller) *MockWerftService_ListenClient {
	mock := &MockWerftService_ListenClient{ctrl: ctrl}
	mock.recorder = &MockWerftService_ListenClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWerftService_ListenClient) EXPECT() *MockWerftService_ListenClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockWerftService_ListenClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockWerftService_ListenClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockWerftService_ListenClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockWerftService_ListenClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockWerftService_ListenClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWerftService_ListenClient)(nil).Context))
}

// Header mocks base method.
func (m *MockWerftService_ListenClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockWerftService_ListenClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockWerftService_ListenClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockWerftService_ListenClient) Recv() (*v1.ListenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.ListenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockWerftService_ListenClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockWerftService_ListenClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockWerftService_ListenClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockWerftService_ListenClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockWerftService_ListenClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockWerftService_ListenClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockWerftService_ListenClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockWerftService_ListenClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockWerftService_ListenClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockWerftService_ListenClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockWerftService_ListenClient)(nil).Trailer))
}

// MockWerftServiceServer is a mock of WerftServiceServer interface.
type MockWerftServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockWerftServiceServerMockRecorder
}

// MockWerftServiceServerMockRecorder is the mock recorder for MockWerftServiceServer.
type MockWerftServiceServerMockRecorder struct {
	mock *MockWerftServiceServer
}

// NewMockWerftServiceServer creates a new mock instance.
func NewMockWerftServiceServer(ctrl *gomock.Controller) *MockWerftServiceServer {
	mock := &MockWerftServiceServer{ctrl: ctrl}
	mock.recorder = &MockWerftServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWerftServiceServer) EXPECT() *MockWerftServiceServerMockRecorder {
	return m.recorder
}

// GetJob mocks base method.
func (m *MockWerftServiceServer) GetJob(arg0 context.Context, arg1 *v1.GetJobRequest) (*v1.GetJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockWerftServiceServerMockRecorder) GetJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockWerftServiceServer)(nil).GetJob), arg0, arg1)
}

// ListJobs mocks base method.
func (m *MockWerftServiceServer) ListJobs(arg0 context.Context, arg1 *v1.ListJobsRequest) (*v1.ListJobsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockWerftServiceServerMockRecorder) ListJobs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockWerftServiceServer)(nil).ListJobs), arg0, arg1)
}

// Listen mocks base method.
func (m *MockWerftServiceServer) Listen(arg0 *v1.ListenRequest, arg1 v1.WerftService_ListenServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockWerftServiceServerMockRecorder) Listen(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockWerftServiceServer)(nil).Listen), arg0, arg1)
}

// StartFromPreviousJob mocks base method.
func (m *MockWerftServiceServer) StartFromPreviousJob(arg0 context.Context, arg1 *v1.StartFromPreviousJobRequest) (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFromPreviousJob", arg0, arg1)
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFromPreviousJob indicates an expected call of StartFromPreviousJob.
func (mr *MockWerftServiceServerMockRecorder) StartFromPreviousJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFromPreviousJob", reflect.TypeOf((*MockWerftServiceServer)(nil).StartFromPreviousJob), arg0, arg1)
}

// StartGitHubJob mocks base method.
func (m *MockWerftServiceServer) StartGitHubJob(arg0 context.Context, arg1 *v1.StartGitHubJobRequest) (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartGitHubJob", arg0, arg1)
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartGitHubJob indicates an expected call of StartGitHubJob.
func (mr *MockWerftServiceServerMockRecorder) StartGitHubJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGitHubJob", reflect.TypeOf((*MockWerftServiceServer)(nil).StartGitHubJob), arg0, arg1)
}

// StartJob mocks base method.
func (m *MockWerftServiceServer) StartJob(arg0 context.Context, arg1 *v1.StartJobRequest) (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJob", arg0, arg1)
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJob indicates an expected call of StartJob.
func (mr *MockWerftServiceServerMockRecorder) StartJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJob", reflect.TypeOf((*MockWerftServiceServer)(nil).StartJob), arg0, arg1)
}

// StartJob2 mocks base method.
func (m *MockWerftServiceServer) StartJob2(arg0 context.Context, arg1 *v1.StartJobRequest2) (*v1.StartJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJob2", arg0, arg1)
	ret0, _ := ret[0].(*v1.StartJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJob2 indicates an expected call of StartJob2.
func (mr *MockWerftServiceServerMockRecorder) StartJob2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJob2", reflect.TypeOf((*MockWerftServiceServer)(nil).StartJob2), arg0, arg1)
}

// StartLocalJob mocks base method.
func (m *MockWerftServiceServer) StartLocalJob(arg0 v1.WerftService_StartLocalJobServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLocalJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartLocalJob indicates an expected call of StartLocalJob.
func (mr *MockWerftServiceServerMockRecorder) StartLocalJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLocalJob", reflect.TypeOf((*MockWerftServiceServer)(nil).StartLocalJob), arg0)
}

// StopJob mocks base method.
func (m *MockWerftServiceServer) StopJob(arg0 context.Context, arg1 *v1.StopJobRequest) (*v1.StopJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopJob", arg0, arg1)
	ret0, _ := ret[0].(*v1.StopJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopJob indicates an expected call of StopJob.
func (mr *MockWerftServiceServerMockRecorder) StopJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopJob", reflect.TypeOf((*MockWerftServiceServer)(nil).StopJob), arg0, arg1)
}

// Subscribe mocks base method.
func (m *MockWerftServiceServer) Subscribe(arg0 *v1.SubscribeRequest, arg1 v1.WerftService_SubscribeServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockWerftServiceServerMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockWerftServiceServer)(nil).Subscribe), arg0, arg1)
}

// MockWerftService_StartLocalJobServer is a mock of WerftService_StartLocalJobServer interface.
type MockWerftService_StartLocalJobServer struct {
	ctrl     *gomock.Controller
	recorder *MockWerftService_StartLocalJobServerMockRecorder
}

// MockWerftService_StartLocalJobServerMockRecorder is the mock recorder for MockWerftService_StartLocalJobServer.
type MockWerftService_StartLocalJobServerMockRecorder struct {
	mock *MockWerftService_StartLocalJobServer
}

// NewMockWerftService_StartLocalJobServer creates a new mock instance.
func NewMockWerftService_StartLocalJobServer(ctrl *gomock.Controller) *MockWerftService_StartLocalJobServer {
	mock := &MockWerftService_StartLocalJobServer{ctrl: ctrl}
	mock.recorder = &MockWerftService_StartLocalJobServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWerftService_StartLocalJobServer) EXPECT() *MockWerftService_StartLocalJobServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockWerftService_StartLocalJobServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockWerftService_StartLocalJobServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWerftService_StartLocalJobServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockWerftService_StartLocalJobServer) Recv() (*v1.StartLocalJobRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.StartLocalJobRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockWerftService_StartLocalJobServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockWerftService_StartLocalJobServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockWerftService_StartLocalJobServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockWerftService_StartLocalJobServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockWerftService_StartLocalJobServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockWerftService_StartLocalJobServer) SendAndClose(arg0 *v1.StartJobResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockWerftService_StartLocalJobServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockWerftService_StartLocalJobServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockWerftService_StartLocalJobServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockWerftService_StartLocalJobServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockWerftService_StartLocalJobServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockWerftService_StartLocalJobServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockWerftService_StartLocalJobServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockWerftService_StartLocalJobServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockWerftService_StartLocalJobServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockWerftService_StartLocalJobServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockWerftService_StartLocalJobServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockWerftService_StartLocalJobServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockWerftService_StartLocalJobServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockWerftService_StartLocalJobServer)(nil).SetTrailer), arg0)
}

// MockWerftService_SubscribeServer is a mock of WerftService_SubscribeServer interface.
type MockWerftService_SubscribeServer struct {
	ctrl     *gomock.Controller
	recorder *MockWerftService_SubscribeServerMockRecorder
}

// MockWerftService_SubscribeServerMockRecorder is the mock recorder for MockWerftService_SubscribeServer.
type MockWerftService_SubscribeServerMockRecorder struct {
	mock *MockWerftService_SubscribeServer
}

// NewMockWerftService_SubscribeServer creates a new mock instance.
func NewMockWerftService_SubscribeServer(ctrl *gomock.Controller) *MockWerftService_SubscribeServer {
	mock := &MockWerftService_SubscribeServer{ctrl: ctrl}
	mock.recorder = &MockWerftService_SubscribeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWerftService_SubscribeServer) EXPECT() *MockWerftService_SubscribeServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockWerftService_SubscribeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockWerftService_SubscribeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWerftService_SubscribeServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockWerftService_SubscribeServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockWerftService_SubscribeServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockWerftService_SubscribeServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockWerftService_SubscribeServer) Send(arg0 *v1.SubscribeResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockWerftService_SubscribeServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWerftService_SubscribeServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockWerftService_SubscribeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockWerftService_SubscribeServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockWerftService_SubscribeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockWerftService_SubscribeServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockWerftService_SubscribeServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockWerftService_SubscribeServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockWerftService_SubscribeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockWerftService_SubscribeServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockWerftService_SubscribeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockWerftService_SubscribeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockWerftService_SubscribeServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockWerftService_SubscribeServer)(nil).SetTrailer), arg0)
}

// MockWerftService_ListenServer is a mock of WerftService_ListenServer interface.
type MockWerftService_ListenServer struct {
	ctrl     *gomock.Controller
	recorder *MockWerftService_ListenServerMockRecorder
}

// MockWerftService_ListenServerMockRecorder is the mock recorder for MockWerftService_ListenServer.
type MockWerftService_ListenServerMockRecorder struct {
	mock *MockWerftService_ListenServer
}

// NewMockWerftService_ListenServer creates a new mock instance.
func NewMockWerftService_ListenServer(ctrl *gomock.Controller) *MockWerftService_ListenServer {
	mock := &MockWerftService_ListenServer{ctrl: ctrl}
	mock.recorder = &MockWerftService_ListenServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWerftService_ListenServer) EXPECT() *MockWerftService_ListenServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockWerftService_ListenServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockWerftService_ListenServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWerftService_ListenServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockWerftService_ListenServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockWerftService_ListenServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockWerftService_ListenServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockWerftService_ListenServer) Send(arg0 *v1.ListenResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockWerftService_ListenServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWerftService_ListenServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockWerftService_ListenServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockWerftService_ListenServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockWerftService_ListenServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockWerftService_ListenServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockWerftService_ListenServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockWerftService_ListenServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockWerftService_ListenServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockWerftService_ListenServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockWerftService_ListenServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockWerftService_ListenServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockWerftService_ListenServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockWerftService_ListenServer)(nil).SetTrailer), arg0)
}
